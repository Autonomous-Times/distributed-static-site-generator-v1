aqua DsgHelpers declares * 

import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/builtin"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-ipfs/ipfs"

import "./services.aqua"
import "./helpers.aqua"
import "./types.aqua"


func fetchPublication(cid: string, kubo: string) -> TuDsgPublication:

    s: *string 
    w = randomContentWorker()
    on w.worker_id! via w.host_id:
      s <- CioKubo.get(kubo, cid)
      -- ipfs_results <- Ipfs.get(cid)
      -- s <- Vault.cat(ipfs_results.path)
        
    <- TuDsgPublicationFromJson.parse(s!)

func fetchAuthor(cid: string, kubo: string) -> TuDsgAuthorData:

    s: *string  
    -- ipfs_results: *IpfsGetResult

    w = randomContentWorker()
    on w.worker_id! via w.host_id:
      -- ipfs_result <- Ipfs.get(cid)
      -- s <- Vault.cat(ipfs_result.path)
      s <- CioKubo.get(kubo, cid)
       
    <- TuDsgAuthorFromJson.parse(s!)

-- func fetchPublicationFromSubnet(cid: string) -> TuDsgPublication:

--     s: *string 
--     ipfs_results: *IpfsGetResult

--     for w <- getContentWorkers():
--         on w.worker_id! via w.host_id:
--             ipfs_results <- Ipfs.dag_get(cid)
--             s <- Vault.cat(ipfs_results!.path)
        
--     <- TuDsgPublicationFromJson.parse(s!)

-- func fetchAuthorFromSubnet(cid: string) -> TuDsgAuthorData:

--     s: *string  
--     ipfs_results: *IpfsGetResult

--     for w <- getContentWorkers():
--         on w.worker_id! via w.host_id:
--             ipfs_results <- Ipfs.dag_get(cid)
--             s <- Vault.cat(ipfs_results!.path)
    
--     <- TuDsgAuthorFromJson.parse(s!)


func fromTempTask(tempTask: TuDsgPublishTaskTemp, kubo: string) -> TuDsgPublishTask:

    authorData = fetchAuthor(tempTask.author, kubo)
    publicationData = fetchPublication(tempTask.publication, kubo)
    
    <- TuDsgPublishTask(
        slug = tempTask.slug, 
        author = authorData, 
        payload = tempTask.payload, 
        post_type = tempTask.post_type, 
        publication = publicationData
    )

func findRipples(ts: []TuDsgTemplate, key: string) -> []TuDsgRipple:

    ripples: *TuDsgRipple
    template: *TuDsgTemplate
    for t <- ts:
      if t.reference == key:
        template <<- t
    for r <- template!.ripples:
        -- if r.value == key:
          ripples <<- r

    <- ripples
