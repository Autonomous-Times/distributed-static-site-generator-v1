# yaml-language-server: $schema=.fluence/schemas/fluence.json

# Defines Fluence Project, most importantly - what exactly you want to deploy and how. You can use `fluence init` command to generate a template for new Fluence project

# Documentation: https://github.com/fluencelabs/cli/tree/main/docs/configs/fluence.md

version: 8

marineVersion: 0.19.7

deployments:
  taskWorkerV1:
    targetWorkers: 3
    pricePerWorkerEpoch: "0.0001"
    initialBalance: "1"
    services: [ cioConsensus, cioKubo, nPublication ]
    spells: [ listener ]
  contentWorkerV1:
    targetWorkers: 3
    pricePerWorkerEpoch: "0.0001"
    initialBalance: "1"
    services: [ cioConsensus, cioKubo, dsgContent, tuContentStore ]
    spells: [ content ]
  renderWorkerV1:
    targetWorkers: 3
    pricePerWorkerEpoch: "0.0001"
    initialBalance: "1"
    services:
      [
        cioKubo,
        cioConsensus,
        nPublication,
        dsgRenderer,
        tuContentStore
      ]
    spells: [ renderer ]
  webHostWorkerV1:
    targetWorkers: 3
    pricePerWorkerEpoch: "0.0001"
    initialBalance: "1"
    services:
      [
        cioConsensus,
        cioSigner,
        nPublication,
        tuDsgWebHost,
        cioKubo,
        cioSafe
      ]
    spells: [ webHost ]

aquaDependencies:
  "@fluencelabs/aqua-lib": 0.9.1
  "@fluencelabs/spell": 0.7.6
  "@fluencelabs/aqua-ipfs": ^0.6.0

compileAqua:
  default:
    input: src/aqua
    output: src/compiled-aqua
    target: ts

services:
  cioVault:
    get: src/services/cio-vault
  dsgContent:
    get: src/services/dsgContent
  tuContentStore:
    get: src/services/tuContentStore
  dsgRenderer:
    get: src/services/dsgRenderer
  tuDsgWebHost:
    get: src/services/tuDsgWebHost
  cioKubo:
    get: src/services/cio-kubo
  cioPinata:
    get: src/services/cio-pinata
  nPublication:
    get: src/services/nPublication
  cioConsensus:
    get: src/services/cioConsensus
  contentStore:
    get: src/services/contentStore
  cioSigner:
    get: src/services/cioSigner
  cioSafe:
    get: src/services/cioSafe

spells:
  listener:
    get: src/spells/listener
  content:
    get: src/spells/content
  renderer:
    get: src/spells/renderer
  webHost:
    get: src/spells/webHost

customFluenceEnv:
  contractsEnv: local
  relays:
    - /ip4/143.176.14.172/tcp/9991/ws/p2p/12D3KooWAKTsNFUiZNFfENDnTPVbokYrhBE3xfiqDtVYz44MtXXJ

##    - /ip4/127.0.0.1/tcp/9993/ws/p2p/12D3KooWRmxeCmLL8KJ24J4rnAQBrNe8jdJdq8vfBA5cPNm31dGR
