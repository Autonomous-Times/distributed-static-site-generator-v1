aqua Services declares *


service CioKubo("cioKubo"):
  add(ipfs_api: string, content: string) -> string
  addRecursive(ipfs_api: string, path_: string) -> string
  get(ipfs_api: string, cid: string) -> string
  getRecursive(ipfs_api: string, cid: string, path_: string) -> string


data AMResponse:
  success: bool
  result_raw: string
  result: string
  timestamp: i64
  host_id: string

data DsgCollection:
  source: string
  key: string
  value: string
  query: string

data DsgContentItem:
  title: string
  slug: string
  publication: string
  author: string
  post_type: string
  tags: string
  categories: string
  parent: string
  creation_date: string
  modified_date: string
  content_cid: string

data DsgRipple:
  query: string
  value: string
  post_type: string

data DsgTable:
  id: string
  gateway: string
  owner: string

service TuContentStore("tuContentStore"):
  insert(content: DsgContentItem, dsg_table: DsgTable, optimistic: bool) -> AMResponse
  queryCollection(collection: DsgCollection, table: DsgTable) -> AMResponse
  queryCollectionCids(collection: DsgCollection, table: DsgTable) -> AMResponse
  queryRipple(ripple: DsgRipple, table: DsgTable) -> AMResponse


service CioPinata("cioPinata"):
  addAsFile(content: string, name: string, pinataJWTKey: string) -> AMResponse
  addFolder(folder: string, pinataJWTKey: string) -> AMResponse


data AquaMarineResult:
  output: [][]u8
  results: []string
  errors: []string

data DsgDns:
  custodian: string
  item_id: string
  auth_key: string

data DsgDomain:
  url: string
  dns: DsgDns

data DsgTemplate:
  reference: string
  file: string
  path: string
  collections: []DsgCollection
  ripples: []DsgRipple

data DsgPublication:
  assets: string
  domains: []DsgDomain
  governor: string
  mapping: []DsgTemplate
  name: string
  templates: string
  table: DsgTable

data DsgRenderObject:
  name: string
  post_type: string
  template: DsgTemplate
  publication_name: string
  domain: DsgDomain
  body_cid: string

service TuDsgRenderer("tuDsgRenderer"):
  map(ro: DsgRenderObject, body_: string, content: [][]DsgContentItem, publication: DsgPublication) -> AquaMarineResult
  single(ro: DsgRenderObject, td: []u8) -> AquaMarineResult


service CioVault("cioVault"):
  dir(path: string) -> bool
  inspect(path: string) -> []string
  write(data: string, path: string) -> bool


service TuDsgWebHost("tuDsgWebHost"):
  update(publication: DsgPublication, cid: string) -> AMResponse


data EventLog:
  address: string
  block_number: string
  params: []string
  transaction_hash: string

data AMEventLogResult:
  success: bool
  results: []EventLog
  error: string

service Npublication("nPublication"):
  create_filter(contract_address: string, topic: string, latest_block: string, rpc_url: string) -> AMResponse
  poll_filter(filter: string, rpc_url: string) -> AMEventLogResult
  read_from_rpc(contract_address: string, function_name: string, args: []string, rpc_url: string) -> AMResponse


service CioConsensus("cioConsensus"):
  getHammingDistance(worker_id: string, task: string) -> u32
  getXORDistance(cid1: string, cid2: string) -> i32
  whoami() -> string


data DsgAuthorData:
  name: string
  repository: string
  content_mappings: string

data DsgMapped:
  item: DsgContentItem
  body: string

data DsgTask:
  slug: string
  author: DsgAuthorData
  payload: string
  post_type: string
  publication: DsgPublication

service DsgContent("dsgContent"):
  includeCid(content: DsgContentItem, cid: string) -> DsgContentItem
  map(task: DsgTask, mappings: string) -> DsgMapped
  pebble(task: DsgTask, contentItem: DsgContentItem) -> []DsgRenderObject
  ripple(task: DsgTask, ripple: DsgRipple, contentItem: DsgContentItem) -> []DsgRenderObject
