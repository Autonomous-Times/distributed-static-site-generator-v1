aqua Services declares *


service CioKubo("cioKubo"):
  add(ipfs_api: string, content: string) -> string
  addRecursive(ipfs_api: string, path_: string) -> string
  get(ipfs_api: string, cid: string) -> string
  getRecursive(ipfs_api: string, cid: string, path_: string) -> string


data AMResponse:
  success: bool
  result_raw: string
  result: string
  timestamp: i64
  host_id: string

data DsgCollection:
  source: string
  key: string
  value: string
  query: string

data DsgContentItem:
  author: string
  categories: string
  content_cid: string
  creation_date: string
  id: string
  modified_date: string
  parent: string
  post_type: string
  publication: string
  slug: string
  tags: string
  title: string

data DsgRipple:
  query: string
  value: string
  post_type: string

data DsgTable:
  id: string
  gateway: string

service TuContentStore("tuContentStore"):
  deleteItem(id: string, table: DsgTable) -> AMResponse
  insert(content: DsgContentItem, dsg_table: DsgTable, optimistic: bool) -> AMResponse
  queryCollection(collection: DsgCollection, table: DsgTable) -> AMResponse
  queryCollectionCids(collection: DsgCollection, table: DsgTable) -> AMResponse
  queryPostType(post_type: string, table: DsgTable, limit: u32, offset: u32) -> AMResponse
  queryRipple(ripple: DsgRipple, table: DsgTable) -> AMResponse


service CioPinata("cioPinata"):
  addAsFile(content: string, name: string, pinataJWTKey: string) -> AMResponse
  addFolder(folder: string, pinataJWTKey: string) -> AMResponse


service CioVault("cioVault"):
  dir(path: string) -> bool
  inspect(path: string) -> []string
  write(data: string, path: string) -> bool


data DsgDns:
  custodian: string
  item_id: string
  auth_key: string

data DsgDomain:
  url: string
  dns: DsgDns

data DsgTemplate:
  reference: string
  file: string
  path: string
  collections: []DsgCollection
  ripples: []DsgRipple

data DsgPublication:
  assets: string
  contract: string
  controller: string
  domains: []DsgDomain
  mapping: []DsgTemplate
  name: string
  storage: string
  table: DsgTable
  templates: string
  rpc: string

service TuDsgWebHost("tuDsgWebHost"):
  update(publication: DsgPublication, cid: string) -> AMResponse


data EventLog:
  address: string
  block_number: string
  params: []string
  transaction_hash: string

data AMEventLogResult:
  success: bool
  results: []EventLog
  error: string

service Npublication("nPublication"):
  create_filter(contract_address: string, topic: string, latest_block: string, rpc_url: string) -> AMResponse
  exec_write(tx_request_string: string, signatures: []string, rpc: string) -> string
  poll_filter(filter: string, rpc_url: string) -> AMEventLogResult
  prep_write(chain_id: u64, contract_address: string, function: string, args: string, sender: string, rpc: string) -> string
  read(contract_address: string, function: string, args: string, rpc: string) -> AMResponse


service CioConsensus("cioConsensus"):
  getHammingDistance(worker_id: string, task: string) -> u32
  getXORDistance(cid1: string, cid2: string) -> i32
  whoami() -> string


data DsgAuthorData:
  name: string
  repository: string
  content_mappings: string

data DsgMapped:
  item: DsgContentItem
  body: string

data DsgRenderObject:
  name: string
  post_type: string
  template: DsgTemplate
  publication_name: string
  domain: DsgDomain
  body_cid: string

data DsgTask:
  author: DsgAuthorData
  hash: string
  items: []DsgRenderObject
  payload: string
  post_type: string
  publication: DsgPublication
  slug: string

service DsgContent("dsgContent"):
  includeCid(content: DsgContentItem, cid: string) -> DsgContentItem
  map(task: DsgTask, mappings: string) -> DsgMapped
  pebble(task: DsgTask, contentItem: DsgContentItem) -> DsgRenderObject
  ripple(task: DsgTask, ripple: DsgRipple, contentItem: DsgContentItem) -> DsgRenderObject


data AquaMarineResult:
  output: [][]u8
  results: []string
  errors: []string

service DsgRenderer("dsgRenderer"):
  map(ro: DsgRenderObject, body_: string, content: [][]DsgContentItem, publication: DsgPublication) -> AquaMarineResult
  single(ro: DsgRenderObject, td: []u8) -> AquaMarineResult
  template(publication: DsgPublication, post_type: string) -> DsgTemplate


service CioSigner("cioSigner"):
  provision(key: string) -> string
  public_address() -> string
  rawtx(tx_request_string: string, chain_id: u64) -> string


service CioSafe("cioSafe"):
  exec_tx(tx_request_string: string, signatures: []string, rpc: string) -> string
  tx_request(sender: string, chain_id: u64, factory_address: string, rpc: string, owners: []string, treshold: u8) -> string
  tx_request_2(sender: string, chain_id: u64, publication_address: string, rpc: string, cid: string) -> string
